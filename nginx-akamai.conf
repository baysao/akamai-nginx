#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  text/html;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    lua_package_path  "/usr/local/openresty/nginx/conf/lua/?.lua;;";

    proxy_cache_path cache levels=1:2 keys_zone=akamai:100m inactive=60m;
    proxy_cache_key "$scheme$request_method$host$request_uri";

    server {
        lua_code_cache off;

        listen       80;
        server_name  localhost;

        listen 443 ssl;

        ssl_certificate      ssl/nginx.crt;
        ssl_certificate_key  ssl/nginx.key;
        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;
        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        location / {

            set $aka_origin_scheme '';
            set $aka_origin_host '';
            set $aka_origin_url '';
            set $aka_deny_reason '';
            set $aka_redirect_location '';
            set $aka_redirect_code '';
            set $aka_cache_ttl_seconds '';
            set $aka_gzip 'off';

            rewrite_by_lua_file conf/lua/akamai.lua;

            #gzip on;
            #gzip_proxied any;
            #gzip_types *;

            resolver 127.0.0.11 ipv6=off;
            proxy_ssl_verify off;
            proxy_ssl_server_name on;
            proxy_set_header Host $aka_origin_host;
            proxy_cache akamai;
            # use the cache if there's a error on app server or it's updating from another request
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            # don't let two requests try to populate the cache at the same time
            proxy_cache_lock on;

            add_header X-Accel-Expires $aka_cache_ttl_seconds;
            add_header X-Proxy-Cache $upstream_cache_status;
            add_header X-Request-time $request_time;

            proxy_pass $aka_origin_scheme://$aka_origin_host$aka_origin_url;

            header_filter_by_lua_block {
                -- log request headers sent to origin
                local reqh = ngx.req.get_headers()
                for k, v in pairs(reqh) do
                    ngx.log(ngx.ERR, "request header "..k.."="..v..";")
                end

                -- manipulate response headers from origin
                local resh = ngx.ctx["aka_downstream_headers"]
                if (resh ~= nil) then
                    for k, v in pairs(resh) do
                        if (v[1] ~= "REGEX" or ngx.header[k] == nil) then
                            ngx.header[k] = v[2]
                        else
                            ngx.header[k] = string.gsub(ngx.header[k], v[3], v[4])
                        end
                    end
                end

            }

        }

        location /info {

            content_by_lua '
              local info = require "info"
              info()';
        }

    }

}
